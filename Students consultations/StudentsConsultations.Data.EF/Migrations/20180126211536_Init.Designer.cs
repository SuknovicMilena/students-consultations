// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using StudentsConsultations.Data.EF;
using System;

namespace StudentsConsultations.Data.EF.Migrations
{
    [DbContext(typeof(StudentskeKonsultacijeDbContext))]
    [Migration("20180126211536_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StudentsConsultations.Domain.Datum", b =>
                {
                    b.Property<DateTime>("DatumKonsultacija");

                    b.HasKey("DatumKonsultacija");

                    b.ToTable("Datum");
                });

            modelBuilder.Entity("StudentsConsultations.Domain.Konsultacije", b =>
                {
                    b.Property<int>("StudentId");

                    b.Property<int>("NastavnikId");

                    b.Property<DateTime>("DatumKonsultacija");

                    b.Property<int>("RazlogId");

                    b.Property<string>("Vreme");

                    b.HasKey("StudentId", "NastavnikId", "DatumKonsultacija");

                    b.HasAlternateKey("DatumKonsultacija", "NastavnikId", "StudentId");

                    b.HasIndex("NastavnikId");

                    b.HasIndex("RazlogId");

                    b.ToTable("Konsultacije");
                });

            modelBuilder.Entity("StudentsConsultations.Domain.Korisnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Ime")
                        .IsRequired();

                    b.Property<string>("Prezime")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Korisnici");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Korisnik");
                });

            modelBuilder.Entity("StudentsConsultations.Domain.Razlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Opis");

                    b.HasKey("Id");

                    b.ToTable("Razlog");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Razlog");
                });

            modelBuilder.Entity("StudentsConsultations.Domain.VrstaZadatka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Naziv");

                    b.HasKey("Id");

                    b.ToTable("VrsteZadataka");
                });

            modelBuilder.Entity("StudentsConsultations.Domain.Zadatak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DatumKonsultacija");

                    b.Property<int>("NastavnikId");

                    b.Property<string>("Opis");

                    b.Property<string>("RokDoZavrsetka");

                    b.Property<int>("StudentId");

                    b.Property<int>("VrstaZadatkaId");

                    b.HasKey("Id");

                    b.HasIndex("DatumKonsultacija");

                    b.HasIndex("NastavnikId");

                    b.HasIndex("StudentId");

                    b.HasIndex("VrstaZadatkaId");

                    b.ToTable("Zadaci");
                });

            modelBuilder.Entity("StudentsConsultations.Domain.Nastavnik", b =>
                {
                    b.HasBaseType("StudentsConsultations.Domain.Korisnik");

                    b.Property<int>("BrojRadneKnjizice");

                    b.ToTable("Nastavnik");

                    b.HasDiscriminator().HasValue("Nastavnik");
                });

            modelBuilder.Entity("StudentsConsultations.Domain.Student", b =>
                {
                    b.HasBaseType("StudentsConsultations.Domain.Korisnik");

                    b.Property<string>("BrojIndeksa")
                        .IsRequired();

                    b.ToTable("Student");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("StudentsConsultations.Domain.Ispit", b =>
                {
                    b.HasBaseType("StudentsConsultations.Domain.Razlog");

                    b.Property<string>("Naziv");

                    b.ToTable("Ispit");

                    b.HasDiscriminator().HasValue("Ispit");
                });

            modelBuilder.Entity("StudentsConsultations.Domain.Projekat", b =>
                {
                    b.HasBaseType("StudentsConsultations.Domain.Razlog");

                    b.Property<string>("NazivIspita");

                    b.Property<string>("NazivProjekta");

                    b.ToTable("Projekat");

                    b.HasDiscriminator().HasValue("Projekat");
                });

            modelBuilder.Entity("StudentsConsultations.Domain.ZavrsniRad", b =>
                {
                    b.HasBaseType("StudentsConsultations.Domain.Razlog");

                    b.Property<string>("Tip");

                    b.ToTable("ZavrsniRad");

                    b.HasDiscriminator().HasValue("ZavrsniRad");
                });

            modelBuilder.Entity("StudentsConsultations.Domain.Konsultacije", b =>
                {
                    b.HasOne("StudentsConsultations.Domain.Datum", "Datum")
                        .WithMany("Konsultacije")
                        .HasForeignKey("DatumKonsultacija")
                        .HasConstraintName("FK_Konsultacije_Datum");

                    b.HasOne("StudentsConsultations.Domain.Nastavnik", "Nastavnik")
                        .WithMany("Konsultacije")
                        .HasForeignKey("NastavnikId")
                        .HasConstraintName("FK_Konsultacije_Nastavnik")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudentsConsultations.Domain.Razlog", "Razlog")
                        .WithMany("Konsultacije")
                        .HasForeignKey("RazlogId")
                        .HasConstraintName("FK_Konsultacije_Razlog");

                    b.HasOne("StudentsConsultations.Domain.Student", "Student")
                        .WithMany("Konsultacije")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Konsultacije_Student")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudentsConsultations.Domain.Zadatak", b =>
                {
                    b.HasOne("StudentsConsultations.Domain.Datum", "Datum")
                        .WithMany("Zadaci")
                        .HasForeignKey("DatumKonsultacija")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudentsConsultations.Domain.Nastavnik", "Nastavnik")
                        .WithMany("Zadaci")
                        .HasForeignKey("NastavnikId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudentsConsultations.Domain.Student", "Student")
                        .WithMany("Zadaci")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudentsConsultations.Domain.VrstaZadatka", "VrstaZadatka")
                        .WithMany("Zadaci")
                        .HasForeignKey("VrstaZadatkaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
